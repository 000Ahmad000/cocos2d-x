/****************************************************************************
Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2011      Zynga Inc.
Copyright (c) 2013-2014 Chukong Technologies Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/
#ifndef __CCPARTICLE_SYSTEM_H__
#define __CCPARTICLE_SYSTEM_H__

#include "base/CCProtocols.h"
#include "2d/CCNode.h"
#include "base/CCValue.h"

NS_CC_BEGIN

/**
 * @addtogroup _2d
 * @{
 */

class ParticleBatchNode;

/** @struct sParticle
 * @~english Structure that contains the values of each particle.
 * @~chinese 包含粒子属性的结构体。
 */
typedef struct sParticle {
    Vec2     pos;
    Vec2     startPos;

    Color4F    color;
    Color4F    deltaColor;

    float        size;
    float        deltaSize;

    float        rotation;
    float        deltaRotation;

    float        timeToLive;

    unsigned int    atlasIndex;

    /** @struct modeA
     * @~english Mode A: gravity mode.
     * @~chinese 模式A:重力模式。
     */
    struct {
        Vec2        dir;
        float        radialAccel;
        float        tangentialAccel;
    } modeA;

    /** @struct modeB
     * @~english Mode B: radius mode.
     * @~chinese 模式B:半径模式。
     */
    struct {
        float        angle;
        float        degreesPerSecond;
        float        radius;
        float        deltaRadius;
    } modeB;

}tParticle;

//typedef void (*CC_UPDATE_PARTICLE_IMP)(id, SEL, tParticle*, Vec2);

class Texture2D;

/** @class ParticleSystem
 * @brief @~english Particle System base class.
Attributes of a Particle System:
- emission rate of the particles
- Gravity Mode (Mode A):
- gravity
- speed +-  variance
- tangential acceleration +- variance
- radial acceleration +- variance
- Radius Mode (Mode B):
- startRadius +- variance
- endRadius +- variance
- rotate +- variance
- Properties common to all modes:
- life +- life variance
- start spin +- variance
- end spin +- variance
- start size +- variance
- end size +- variance
- start color +- variance
- end color +- variance
- life +- variance
- blending function
- texture

Cocos2d also supports particles generated by Particle Designer (http://particledesigner.71squared.com/).
'Radius Mode' in Particle Designer uses a fixed emit rate of 30 hz. Since that can't be guaranteed in cocos2d,
cocos2d uses a another approach, but the results are almost identical. 

Cocos2d supports all the variables used by Particle Designer plus a bit more:
- spinning particles (supported when using ParticleSystemQuad)
- tangential acceleration (Gravity mode)
- radial acceleration (Gravity mode)
- radius direction (Radius mode) (Particle Designer supports outwards to inwards direction only)

It is possible to customize any of the above mentioned properties in runtime. Example:

 * @~chinese 粒子系统基类。
 * 粒子系统的属性:
 * - 粒子的发射速率
 * - 重力模式:
 * - - 重力
 * - - 速率 +- 浮动值
 * - - 切向加速度 +- 浮动值
 * - - 径向加速度 +- 浮动值
 * - 半径模式:
 * - - 粒子开始时的半径 +- 浮动值
 * - - 粒子结束时的半径 +- 浮动值
 * - - 粒子旋转角度 +- 浮动值
 * - 通用属性:
 * - - 粒子存活时间 +- 浮动值
 * - - 开始时旋转角度 +- 浮动值
 * - - 结束时旋转角度 +- 浮动值
 * - - 开始时粒子大小 +- 浮动值
 * - - 结束时粒子大小 +- 浮动值
 * - - 开始颜色 +- 浮动值
 * - - 最终颜色 +- 浮动值
 * - - 粒子存活时间 +- 浮动值
 * - - GL混合模式
 * - - 粒子使用的纹理
 * 
 * Cocos2d还支持Particle Designer编辑生成的粒子(http://particledesigner.71squared.com）
 * 在粒子半径模式设计使用一个固定的发射率30 hz。不能保证在cocos2d之后,
 * cocos2d使用另一种方法,但结果是几乎相同的。
 * 
 * Cocos2d除了支持Particle Designer所有属性还支持有以下属性:
 * - 旋转的粒子(当使用ParticleSystemQuad时)
 * - 切向加速度(重力模式)
 * - 径向加速度(重力模式)
 * - 半径方向(半径模式)(Particle Designer仅支持由外向内方向)
 * 
 * 可以在运行时定制任何上述属性。例子:
 * 
 * @code
 * emitter.radialAccel = 15;
 * emitter.startSpin = 0;
 * @endcode
 */

#if (CC_TARGET_PLATFORM == CC_PLATFORM_WINRT)
#ifdef RELATIVE
#undef RELATIVE
#endif
#endif

class CC_DLL ParticleSystem : public Node, public TextureProtocol
{
public:
    /** @~english Mode
     * @~chinese 模式
     * @js cc.ParticleSystem.MODE_GRAVITY;
     */
    enum class Mode
    {
        GRAVITY,
        RADIUS,
    };
    
    /** @~english PositionType,Possible types of particle positions.
     * @~chinese PositionType，粒子位置类型。
     * @js cc.ParticleSystem.TYPE_FREE
     */
    enum class PositionType
    {
        /** @~english Living particles are attached to the world and are unaffected by emitter repositioning. 
         * @~chinese 自由模式，粒子附属于世界，不随粒子发射器位置改变而改变。
         */
        FREE, 
        
        /** @~english Living particles are attached to the world but will follow the emitter repositioning.
         * Use case: Attach an emitter to an sprite, and you want that the emitter follows the sprite.
         * @~chinese 相对模式，粒子附属于世界，但会跟随粒子发射器位置改变而移动。
         */
        RELATIVE, 
        
        /** @~english Living particles are attached to the emitter and are translated along with it. 
         * @~chinese 分组模式，粒子附属于粒子发射器，并跟随发射器移动。
         */
        GROUPED, 

    };
    
    enum {
        /** @~english The Particle emitter lives forever.  @~chinese 粒子发射器将一直存在。*/
        DURATION_INFINITY = -1,
        
        /** @~english The starting size of the particle is equal to the ending size.  @~chinese 从粒子的起始大小等于结束时大小。*/
        START_SIZE_EQUAL_TO_END_SIZE = -1,
        
        /** @~english The starting radius of the particle is equal to the ending radius.  @~chinese 粒子起始半径等于结束时半径。*/
        START_RADIUS_EQUAL_TO_END_RADIUS = -1,
    };
    
    /** @~english Creates an initializes a ParticleSystem from a plist file.
     * This plist files can be created manually or with Particle Designer:
     * http://particledesigner.71squared.com
     *
     * @~chinese 基于一个plist配置文件创建一个粒子系统。
     * 这个plist文件可以是手动创建，或者通过编辑器Particle Designer:
     * 链接:http://particledesigner.71squared.com
     * @since v2.0
     *
     * @param plistFile @~english Particle plist file path.
     * @~chinese 粒子plist配置文件路径。
     *
     * @return @~english An autoreleased ParticleSystem object.
     * @~chinese 一个被标记为自动释放的ParticleSystem对象。
     */
    static ParticleSystem * create(const std::string& plistFile);

    /** @~english Create a system with a fixed number of particles.
     * @~chinese 基于给定的粒子数量创建一个粒子系统。
     * 
     * @param numberOfParticles @~english A given number of particles.
     * @~chinese 粒子数。
     *
     * @return @~english An autoreleased ParticleSystemQuad object.
     * @~chinese 一个autoreleased ParticleSystemQuad对象。
     * @js NA
     */
    static ParticleSystem* createWithTotalParticles(int numberOfParticles);

    /** @~english Add a particle to the emitter.
     * @~chinese 往粒子发射器添加一个粒子。
     * 
     * @return @~english True if add success.
     * @~chinese 如果添加成功返回true。
     */
    bool addParticle();

    /** @~english Initializes a particle.
     * @~chinese 初始化粒子。
     * 
     * @param particle @~english A given particle pointer.
     * @~chinese 一个给定的粒子指针。
     */
    void initParticle(tParticle* particle);

    /** @~english Stop emitting particles. Running particles will continue to run until they die.
     * @~chinese 停止发射粒子。正在运行中的粒子将继续运行,直到结束。
     */
    void stopSystem();

    /** @~english Kill all living particles.
     * @~chinese 清除当前存活的所有粒子。
     */
    void resetSystem();

    /** @~english Whether or not the system is full.
     * @~chinese 粒子系统是否已经满了。
     * 
     * @return @~english True if the system is full.
     * @~chinese 如果系统已经满了返回true。
     */
    bool isFull();

    /** @~english Update the verts position data of particle,
     should be overridden by subclasses. 
     *
     * @~chinese 更新粒子的顶点的位置数据,
     * 应该被子类覆盖。
     * 
     * @param particle @~english A certain particle.
     * @~chinese 一定的粒子。
     * @param newPosition @~english A new position.
     * @~chinese 一个新的位置。
     */
    virtual void updateQuadWithParticle(tParticle* particle, const Vec2& newPosition);

    /** @~english Update the VBO verts buffer which does not use batch node.
     * @~chinese 更新VBO顶点缓冲,不使用批处理节点
     */
    virtual void postStep();

    /** @~english Call the update mathod with no time.
     * @~chinese 以没有给定时间的方式调用update函数。
     */
    virtual void updateWithNoTime();

    /** @~english Whether or not the particle system removed self on finish.
     * @~chinese 获取粒子系统在结束时是否移除自己。
     * 
     * @return @~english True if the particle system removed self on finish.
     * @~chinese true，粒子系统在结束时将移除自己。
     */
    virtual bool isAutoRemoveOnFinish() const;
    
    /** @~english Set the particle system auto removed it self on finish.
     * @~chinese 设置粒子系统在结束时是否移除自己。
     * 
     * @param var @~english True if the particle system removed self on finish.
     * @~chinese true，粒子系统在结束时将移除自己。
     */
    virtual void setAutoRemoveOnFinish(bool var);

    // mode A
    /** @~english Gets the garvity.
     * @~chinese 获取重力设置。
     * 
     * @return @~english The gravity.
     * @~chinese 重力。
     */
    virtual const Vec2& getGravity();

    /** @~english Sets the gravity.
     * @~chinese 设置重力。
     * 
     * @param g @~english The gravity.
     * @~chinese 重力。
     */
    virtual void setGravity(const Vec2& g);

    /** @~english Gets the speed.
     * @~chinese 获取速度基准值。
     * 
     * @return @~english The speed.
     * @~chinese 速度基准值。
     */
    virtual float getSpeed() const;

    /** @~english Sets the speed.
     * @~chinese 设置速度基准值。
     * 
     * @param speed @~english The speed.
     * @~chinese 速度基准值。
     */
    virtual void setSpeed(float speed);

    /** @~english Gets the speed variance.
     * @~chinese 获取速度浮动值。
     * 
     * @return @~english The speed variance.
     * @~chinese 速度浮动值。
     */
    virtual float getSpeedVar() const;

    /** @~english Sets the speed variance.
     * @~chinese 设置速度浮动值。
     * 
     * @param speed @~english The speed variance.
     * @~chinese 速度浮动值。
     */
    virtual void setSpeedVar(float speed);

    /** @~english Gets the tangential acceleration.
     * @~chinese 获取切向加速度基准值。
     * 
     * @return @~english The tangential acceleration.
     * @~chinese 切向加速度基准值。
     */
    virtual float getTangentialAccel() const;

    /** @~english Sets the tangential acceleration.
     * @~chinese 设置切向加速度基准值。
     * 
     * @param t @~english The tangential acceleration.
     * @~chinese 切向加速度基准值。
     */
    virtual void setTangentialAccel(float t);

    /** @~english Gets the tangential acceleration variance.
     * @~chinese 获取切向加速度浮动值。
     * 
     * @return @~english The tangential acceleration variance.
     * @~chinese 切向加速度浮动值
     */
    virtual float getTangentialAccelVar() const;

    /** @~english Sets the tangential acceleration variance.
     * @~chinese 设置切向加速度浮动值。
     * 
     * @param t @~english The tangential acceleration variance.
     * @~chinese 切向加速度浮动值。
     */
    virtual void setTangentialAccelVar(float t);

    /** @~english Gets the radial acceleration.
     * @~chinese 获取径向加速度基准值。
     * 
     * @return @~english The radial acceleration.
     * @~chinese 径向加速度基准值。
     */
    virtual float getRadialAccel() const;

    /** @~english Sets the radial acceleration.
     * @~chinese 设置径向加速度基准值。
     * 
     * @param t @~english The radial acceleration.
     * @~chinese 径向加速度基准值。
     */
    virtual void setRadialAccel(float t);

    /** @~english Gets the radial acceleration variance.
     * @~chinese 获取径向加速度浮动值。
     * 
     * @return @~english The radial acceleration variance.
     * @~chinese 径向加速度浮动值。
     */
    virtual float getRadialAccelVar() const;

    /** @~english Sets the radial acceleration variance.
     * @~chinese 设置径向加速度浮动值。
     * 
     * @param t @~english The radial acceleration variance.
     * @~chinese 径向加速度浮动值。
     */
    virtual void setRadialAccelVar(float t);

    /** @~english Whether or not the rotation of each particle to its direction.
     *
     * @~chinese 是否每个粒子的旋转方向。
     * 
     * @return @~english True if the rotation is the direction.
     * @~chinese 如果旋转方向。
     */
    virtual bool getRotationIsDir() const;

    /** @~english Sets the rotation of each particle to its direction.
     *
     * @~chinese 设置粒子的旋转方向是否。
     * 
     * @param t @~english True if the rotation is the direction.
     * @~chinese 如果旋转方向。
     */
    virtual void setRotationIsDir(bool t);

    // mode B
    /** @~english Gets the start radius.
     * @~chinese 获取开始时半径基准值。
     * 
     * @return @~english The start radius.
     * @~chinese 半径基准值。
     */
    virtual float getStartRadius() const;

    /** @~english Sets the start radius.
     * @~chinese 设置开始时半径基准值。
     * 
     * @param startRadius @~english The start radius.
     * @~chinese 开始时半径基准值。
     */
    virtual void setStartRadius(float startRadius);

    /** @~english Gets the start radius variance.
     * @~chinese 获取开始时半径浮动值。
     * 
     * @return @~english The start radius variance.
     * @~chinese 半径浮动值。
     */
    virtual float getStartRadiusVar() const;

    /** @~english Sets the start radius variance.
     * @~chinese 设置开始时半径浮动值。
     * 
     * @param startRadiusVar @~english The start radius variance.
     * @~chinese 半径浮动值。
     */
    virtual void setStartRadiusVar(float startRadiusVar);

    /** @~english Gets the end radius.
     * @~chinese 获取结束时半径基准值。
     * 
     * @return @~english The end radius.
     * @~chinese 半径基准值。
     */
    virtual float getEndRadius() const;

    /** @~english Sets the end radius.
     * @~chinese 设置结束时半径基准值。
     * 
     * @param endRadius @~english The end radius.
     * @~chinese 半径基准值。
     */
    virtual void setEndRadius(float endRadius);

    /** @~english Gets the end radius variance.
     * @~chinese 获取结束时半径浮动值。
     * 
     * @return @~english The end radius variance.
     * @~chinese 半径浮动值。
     */
    virtual float getEndRadiusVar() const;

    /** @~english Sets the end radius variance.
     * @~chinese 设置结束时半径浮动值。
     * 
     * @param endRadiusVar @~english The end radius variance.
     * @~chinese 半径浮动值。
     */
    virtual void setEndRadiusVar(float endRadiusVar);

    /** @~english Gets the number of degrees to rotate a particle around the source pos per second.
     * @~chinese 获取粒子围绕粒子源每秒旋转角度基准值。
     * 
     * @return @~english The number of degrees to rotate a particle around the source pos per second.
     * @~chinese 旋转角度基准值。
     */
    virtual float getRotatePerSecond() const;

    /** @~english Sets the number of degrees to rotate a particle around the source pos per second.
     * @~chinese 设置粒子围绕粒子源每秒旋转角度基准值。
     * 
     * @param degrees @~english The number of degrees to rotate a particle around the source pos per second.
     * @~chinese 旋转角度基准值。
     */
    virtual void setRotatePerSecond(float degrees);

    /** @~english Gets the rotate per second variance.
     * @~chinese 获取粒子围绕粒子源每秒旋转角度浮动值。
     * 
     * @return @~english The rotate per second variance.
     * @~chinese 旋转角度浮动值。
     */
    virtual float getRotatePerSecondVar() const;

    /** @~english Sets the rotate per second variance.
     * @~chinese 设置粒子围绕粒子源每秒旋转角度浮动值。
     * 
     * @param degrees @~english The rotate per second variance.
     * @~chinese 旋转角度浮动值。
     */
    virtual void setRotatePerSecondVar(float degrees);

    virtual void setScale(float s) override;
    virtual void setRotation(float newRotation) override;
    virtual void setScaleX(float newScaleX) override;
    virtual void setScaleY(float newScaleY) override;

    /** @~english Whether or not the particle system is active.
     * @~chinese 获取粒子系统是否激活。
     * 
     * @return @~english True if the particle system is active.
     * @~chinese 如果粒子系统是激活的返回true。
     */
    virtual bool isActive() const;

    /** @~english Whether or not the particle system is blend additive.
     * @~chinese 粒子系统是否混合添加剂。
     * 
     * @return @~english True if the particle system is blend additive.
     * @~chinese 如果粒子系统混合添加剂。
     */
    virtual bool isBlendAdditive() const;

    /** @~english Sets the particle system blend additive.
     * @~chinese 设置粒子系统混合。
     * 
     * @param value @~english True if the particle system is blend additive.
     * @~chinese 如果粒子系统混合添加剂。
     */
    virtual void setBlendAdditive(bool value);

    /** @~english Gets the batch node.
     * @~chinese 获取粒子批处理节点。
     * 
     * @return @~english The batch node.
     * @~chinese 粒子批处理节点。
     */
    virtual ParticleBatchNode* getBatchNode() const;

    /** @~english Sets the batch node.
     * @~chinese 设置粒子批处理节点。
     * 
     * @param batchNode @~english The batch node.
     * @~chinese 粒子批处理节点。
     */
    virtual void setBatchNode(ParticleBatchNode* batchNode);
    
    /** @~english Gets the index of system in batch node array.
     * @~chinese 获取粒子系统在批节点里的索引。
     * 
     * @return @~english The index of system in batch node array.
     * @~chinese 索引值。
     */
    inline int getAtlasIndex() const { return _atlasIndex; };

    /** @~english Sets the index of system in batch node array.
     * @~chinese 设置粒子系统在批节点里的索引。
     * 
     * @param index @~english The index of system in batch node array.
     * @~chinese 索引值。
     */
    inline void setAtlasIndex(int index) { _atlasIndex = index; };

    /** @~english Gets the Quantity of particles that are being simulated at the moment.
     * @~chinese 得到当前粒子数量。
     * 
     * @return @~english The Quantity of particles that are being simulated at the moment.
     * @~chinese 当前粒子数量。
     */
    inline unsigned int getParticleCount() const { return _particleCount; };
    
    /** @~english Gets how many seconds the emitter will run. -1 means 'forever'.
     * @~chinese 获取发射器运行时间。
     * 
     * @return @~english The seconds that the emitter will run. -1 means 'forever'.
     * @~chinese 发射器运行时间（单位秒），-1表示一直运行。
     */
    inline float getDuration() const { return _duration; };

    /** @~english Sets how many seconds the emitter will run. 
     * @~chinese 设置发射器运行时间。
     * 
     * @param duration @~english The seconds that the emitter will run. -1 means 'forever'.
     * @~chinese 发射器运行时间（单位秒），-1表示一直运行。
     */
    inline void setDuration(float duration) { _duration = duration; };
    
    /** @~english Gets the source position of the emitter.
     * @~chinese 获取发射器位置基准值。
     * 
     * @return @~english The source position of the emitter.
     * @~chinese 发射器位置基准值。
     */
    inline const Vec2& getSourcePosition() const { return _sourcePosition; };

    /** @~english Sets the source position of the emitter.
     * @~chinese 设置发射器位置基准值。
     * 
     * @param pos @~english The source position of the emitter.
     * @~chinese 发射器位置基准值。
     */
    inline void setSourcePosition(const Vec2& pos) { _sourcePosition = pos; };
    
    /** @~english Gets the position variance of the emitter.
     * @~chinese 获取发射器位置浮动值。
     * 
     * @return @~english The position variance of the emitter.
     * @~chinese 发射器位置浮动值。
     */
    inline const Vec2& getPosVar() const { return _posVar; };

    /** @~english Sets the position variance of the emitter.
     * @~chinese 设置发射器位置浮动值。
     * 
     * @param pos @~english The position variance of the emitter.
     * @~chinese 发射器位置浮动值。
     */
    inline void setPosVar(const Vec2& pos) { _posVar = pos; };

    /** @~english Gets the life of each particle.
     * @~chinese 获取粒子存活时间基准值。
     * 
     * @return @~english The life of each particle.
     * @~chinese 粒子存活时间基准值。
     */
    inline float getLife() const { return _life; };

    /** @~english Sets the life of each particle.
     * @~chinese 设置粒子存活时间基准值。
     * 
     * @param life @~english The life of each particle.
     * @~chinese 粒子存活时间基准值。
     */
    inline void setLife(float life) { _life = life; };

    /** @~english Gets the life variance of each particle.
     * @~chinese 获取粒子存活时间浮动值。
     * 
     * @return @~english The life variance of each particle.
     * @~chinese 粒子存活时间浮动值。
     */
    inline float getLifeVar() const { return _lifeVar; };

    /** @~english Sets the life variance of each particle.
     * @~chinese 设置粒子存活时间浮动值。
     * 
     * @param lifeVar @~english The life variance of each particle.
     * @~chinese 粒子存活时间浮动值。
     */
    inline void setLifeVar(float lifeVar) { _lifeVar = lifeVar; };

    /** @~english Gets the angle of each particle. 
     * @~chinese 获取粒子发射角度基准值。
     * 
     * @return @~english The angle of each particle.
     * @~chinese 粒子发射角度基准值。
     */
    inline float getAngle() const { return _angle; };

    /** @~english Sets the angle of each particle.
     * @~chinese 设置粒子发射角度基准值。
     * 
     * @param angle @~english The angle of each particle.
     * @~chinese 粒子发射角度基准值。
     */
    inline void setAngle(float angle) { _angle = angle; };

    /** @~english Gets the angle variance of each particle.
     * @~chinese 获取粒子发射角度浮动值。
     * 
     * @return @~english The angle variance of each particle.
     * @~chinese 粒子发射角度浮动值。
     */
    inline float getAngleVar() const { return _angleVar; };

    /** @~english Sets the angle variance of each particle.
     * @~chinese 设置粒子发射角度浮动值。
     * 
     * @param angleVar @~english The angle variance of each particle.
     * @~chinese 粒子发射角度浮动值。
     */
    inline void setAngleVar(float angleVar) { _angleVar = angleVar; };
    
    /** @~english Gets the mode of the emitter.
     * @~chinese 获取发射器模式。
     * 
     * @return @~english The mode of the emitter.
     * @~chinese 发射器的模式。
     */
    inline Mode getEmitterMode() const { return _emitterMode; };

    /** @~english Sets the mode of the emitter.
     * @~chinese 设置粒子系统发射器模式。
     * 
     * @param mode @~english The mode of the emitter.
     * @~chinese 发射器模式。
     */
    inline void setEmitterMode(Mode mode) { _emitterMode = mode; };
    
    /** @~english Gets the start size in pixels of each particle.
     * @~chinese 获取粒子开始时粒子大小基准值(以像素为单位)。
     * 
     * @return @~english The start size in pixels of each particle.
     * @~chinese 粒子大小基准值(以像素为单位)。
     */
    inline float getStartSize() const { return _startSize; };

    /** @~english Sets the start size in pixels of each particle.
     * @~chinese 设置粒子开始时粒子大小基准值(以像素为单位)。
     * 
     * @param startSize @~english The start size in pixels of each particle.
     * @~chinese 粒子大小基准值(以像素为单位)。
     */
    inline void setStartSize(float startSize) { _startSize = startSize; };

    /** @~english Gets the start size variance in pixels of each particle.
     * @~chinese 获取粒子开始时粒子大小浮动值(以像素为单位)。
     * 
     * @return @~english The start size variance in pixels of each particle.
     * @~chinese 粒子大小浮动值(以像素为单位)。
     */
    inline float getStartSizeVar() const { return _startSizeVar; };

    /** @~english Sets the start size variance in pixels of each particle.
     * @~chinese 设置粒子开始时粒子大小浮动值(以像素为单位)。
     * 
     * @param sizeVar @~english The start size variance in pixels of each particle.
     * @~chinese 粒子大小浮动值(以像素为单位)。
     */
    inline void setStartSizeVar(float sizeVar) { _startSizeVar = sizeVar; };

    /** @~english Gets the end size in pixels of each particle.
     * @~chinese 获取粒子结束时粒子大小基准值(以像素为单位)。
     * 
     * @return @~english The end size in pixels of each particle.
     * @~chinese 粒子大小基准值(以像素为单位)。
     */
    inline float getEndSize() const { return _endSize; };

    /** @~english Sets the end size in pixels of each particle.
     * @~chinese 设置粒子结束时粒子大小基准值(以像素为单位)。
     * 
     * @param endSize @~english The end size in pixels of each particle.
     * @~chinese 粒子大小基准值(以像素为单位)。
     */
    inline void setEndSize(float endSize) { _endSize = endSize; };

    /** @~english Gets the end size variance in pixels of each particle.
     * @~chinese 获取粒子结束时粒子大小浮动值。
     * 
     * @return @~english The end size variance in pixels of each particle.
     * @~chinese 粒子大小浮动值。
     */
    inline float getEndSizeVar() const { return _endSizeVar; };

    /** @~english Sets the end size variance in pixels of each particle.
     * @~chinese 设置粒子结束时粒子大小浮动值。
     * 
     * @param sizeVar @~english The end size variance in pixels of each particle.
     * @~chinese 粒子大小浮动值。
     */
    inline void setEndSizeVar(float sizeVar) { _endSizeVar = sizeVar; };

    /** @~english Gets the start color of each particle.
     * @~chinese 获取粒子开始时颜色基准值。
     * 
     * @return @~english The start color of each particle.
     * @~chinese 颜色基准值。
     */
    inline const Color4F& getStartColor() const { return _startColor; };

    /** @~english Sets the start color of each particle.
     * @~chinese 设置粒子开始时颜色基准值。
     * 
     * @param color @~english The start color of each particle.
     * @~chinese 颜色基准值。
     */
    inline void setStartColor(const Color4F& color) { _startColor = color; };

    /** @~english Gets the start color variance of each particle.
     * @~chinese 获取粒子开始时颜色浮动值。
     * 
     * @return @~english The start color variance of each particle.
     * @~chinese 颜色浮动值。
     */
    inline const Color4F& getStartColorVar() const { return _startColorVar; };

    /** @~english Sets the start color variance of each particle.
     * @~chinese 设置粒子开始时颜色浮动值。
     * 
     * @param color @~english The start color variance of each particle.
     * @~chinese 颜色浮动值。
     */
    inline void setStartColorVar(const Color4F& color) { _startColorVar = color; };

    /** @~english Gets the end color and end color variation of each particle.
     * @~chinese 获取粒子结束时颜色基准值。
     * 
     * @return @~english The end color and end color variation of each particle.
     * @~chinese 颜色基准值。
     */
    inline const Color4F& getEndColor() const { return _endColor; };

    /** @~english Sets the end color and end color variation of each particle.
     * @~chinese 设置粒子结束时颜色基准值。
     * 
     * @param color @~english The end color and end color variation of each particle.
     * @~chinese 颜色基准值。
     */
    inline void setEndColor(const Color4F& color) { _endColor = color; };

    /** @~english Gets the end color variance of each particle.
     * @~chinese 获取粒子结束时颜色浮动值。
     * 
     * @return @~english The end color variance of each particle.
     * @~chinese 颜色浮动值。
     */
    inline const Color4F& getEndColorVar() const { return _endColorVar; };

    /** @~english Sets the end color variance of each particle.
     * @~chinese 设置粒子结束时颜色浮动值。
     * 
     * @param color @~english The end color variance of each particle.
     * @~chinese 颜色浮动值。
     */
    inline void setEndColorVar(const Color4F& color) { _endColorVar = color; };

    /** @~english Gets the start spin of each particle.
     * @~chinese 获取粒子开始时旋转角度基准值。
     * 
     * @return @~english The start spin of each particle.
     * @~chinese 旋转角度基准值。
     */
    inline float getStartSpin() const { return _startSpin; };

    /** @~english Sets the start spin of each particle.
     * @~chinese 设置粒子开始时旋转角度基准值。
     * 
     * @param spin @~english The start spin of each particle.
     * @~chinese 旋转角度基准值。
     */
    inline void setStartSpin(float spin) { _startSpin = spin; };

    /** @~english Gets the start spin variance of each particle.
     * @~chinese 获取粒子开始时旋转角度浮动值。
     * 
     * @return @~english The start spin variance of each particle.
     * @~chinese 旋转角度浮动值。
     */
    inline float getStartSpinVar() const { return _startSpinVar; };

    /** @~english Sets the start spin variance of each particle.
     * @~chinese 设置粒子开始时旋转角度浮动值。
     * 
     * @param pinVar @~english The start spin variance of each particle.
     * @~chinese 旋转角度浮动值。
     */
    inline void setStartSpinVar(float pinVar) { _startSpinVar = pinVar; };

    /** @~english Gets the end spin of each particle.
     * @~chinese 获取粒子结束时旋转角度基准值。
     * 
     * @return @~english The end spin of each particle.
     * @~chinese 旋转角度基准值。
     */
    inline float getEndSpin() const { return _endSpin; };

    /** @~english Sets the end spin of each particle.
     * @~chinese 设置粒子结束时旋转角度基准值。
     * 
     * @param endSpin @~english The end spin of each particle.
     * @~chinese 旋转角度基准值。
     */
    inline void setEndSpin(float endSpin) { _endSpin = endSpin; };

    /** @~english Gets the end spin variance of each particle.
     * @~chinese 获取粒子结束时旋转角度的浮动值。
     * 
     * @return @~english The end spin variance of each particle.
     * @~chinese 旋转角度浮动值。
     */
    inline float getEndSpinVar() const { return _endSpinVar; };

    /** @~english Sets the end spin variance of each particle.
     * @~chinese 设置粒子结束时旋转角度的浮动值。
     * 
     * @param endSpinVar @~english The end spin variance of each particle.
     * @~chinese 旋转角度浮动值。
     */
    inline void setEndSpinVar(float endSpinVar) { _endSpinVar = endSpinVar; };

    /** @~english Gets the emission rate of the particles.
     *
     * @~chinese 得到了粒子的发射速率。
     * 
     * @return @~english The emission rate of the particles.
     * @~chinese 粒子的发射速率。
     */
    inline float getEmissionRate() const { return _emissionRate; };

    /** @~english Sets the emission rate of the particles.
     * @~chinese 设置粒子的发射速率。
     * 
     * @param rate @~english The emission rate of the particles.
     * @~chinese 粒子的发射速率。
     */
    inline void setEmissionRate(float rate) { _emissionRate = rate; };

    /** @~english Gets the maximum particles of the system.
     * @~chinese 获取粒子系统的粒子数最大限度。
     * 
     * @return @~english The maximum particles of the system.
     * @~chinese 粒子数最大限度。
     */
    virtual int getTotalParticles() const;

    /** @~english Sets the maximum particles of the system.
     * @~chinese 设置粒子系统的粒子数最大限度。
     * 
     * @param totalParticles @~english The maximum particles of the system.
     * @~chinese 粒子数最大限度。
     */
    virtual void setTotalParticles(int totalParticles);

    inline void setOpacityModifyRGB(bool opacityModifyRGB) override { _opacityModifyRGB = opacityModifyRGB; };
    inline bool isOpacityModifyRGB() const override { return _opacityModifyRGB; };
    CC_DEPRECATED_ATTRIBUTE inline bool getOpacityModifyRGB() const { return isOpacityModifyRGB(); }
    
    /** @~english Gets the particles movement type: Free or Grouped.
     * @~chinese 获取粒子运动类型:自由或分组。
     * @since v0.8
     *
     * @return @~english The particles movement type.
     * @~chinese 粒子的运动类型。
     */
    inline PositionType getPositionType() const { return _positionType; };

    /** @~english Sets the particles movement type: Free or Grouped.
     * @~chinese 设置粒子运动类型:自由或分组。
     *
     * @param type @~english The particles movement type.
     * @~chinese 粒子的运动类型。
     * @since v0.8
     */
    inline void setPositionType(PositionType type) { _positionType = type; };
    
    // Overrides
    virtual void onEnter() override;
    virtual void onExit() override;
    virtual void update(float dt) override;
    virtual Texture2D* getTexture() const override;
    virtual void setTexture(Texture2D *texture) override;    
    virtual void setBlendFunc(const BlendFunc &blendFunc) override;
    virtual const BlendFunc &getBlendFunc() const override;
    
CC_CONSTRUCTOR_ACCESS:
    /**
     * @js ctor
     */
    ParticleSystem();
    
    virtual ~ParticleSystem();

    bool init() override;
    
    bool initWithFile(const std::string& plistFile);
    
    bool initWithDictionary(ValueMap& dictionary);
    
    bool initWithDictionary(ValueMap& dictionary, const std::string& dirname);
    
    virtual bool initWithTotalParticles(int numberOfParticles);

protected:

private:
    CC_DISALLOW_COPY_AND_ASSIGN(ParticleSystem);
};

// end of _2d group
/// @}

NS_CC_END

#endif //__CCPARTICLE_SYSTEM_H__
